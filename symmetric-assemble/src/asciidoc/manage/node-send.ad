Events other than data changes can be sent to nodes, which include the following:

SQL Scripts:: Sql can be sent to be executed on a target node
BSH Scripts:: Beanshell scripts can be sent to be executed on a target node
Table Schema:: The schema the source node can be replicated to the target node individually

ifndef::pro[]

To create an event, you insert into <<DATA>> at the source database.  Any column not specified is not required.

|===           
| Column  | Value  
| table_name | Name of your table to be sent. 
| event_type | Use 'R' for reload, 'S' for SQL, 'C' for create table.
| row_data   |  For reload event, specify the "where" clause to limit rows or use null for all rows.  For SQL event, specify the SQL to run. 
| old_data   | For Table Schema event, specify a comma separated list of options to modify what gets sent with the table schema request.
| trigger_hist_id  |  Reference to the active entry in <<TRIGGER_HIST>> for your table. 
| channel_id  |  The channel to create batches on. 
| create_time |  Timestamp when this event was created.
| node_list | A comma separated list of node_ids to route batches to. 
|===

===== Reload Event

A "reload" event will send rows for a table, either all rows or the rows you specify.
You may need to re-send data when the change itself was not captured.
For example, if changes occurred prior to installing triggers, or if the data at the destination was accidentally deleted,
or if a batch was manually ignored  
            
IMPORTANT: Be careful to send data for tables in an order that will satisfy foreign keys.

[source, sql]
----
insert into sym_data (node_list, table_name, event_type, row_data, trigger_hist_id, channel_id, create_time)
select '00001', source_table_name, 'R', '"tran_id=900"', trigger_hist_id, 'reload', current_timestamp
from sym_trigger_hist where source_table_name = 'sale_transaction' and inactive_time is null;
----

===== SQL Event

A "SQL" event runs SQL you specify at the target nodes.

[source, sql]
----
insert into sym_data (node_list, table_name, event_type, row_data, trigger_hist_id, channel_id, create_time)
select '00001', source_table_name, 'S', '"delete from sale_transaction where day = ''2012-12-01''"', trigger_hist_id, 'reload', current_timestamp
from sym_trigger_hist where source_table_name = 'sale_transaction' and inactive_time is null;
----

===== BSH Event

A BSH event runs a BeanShell script you specify at the target nodes.

.Variables available to the script
[cols=".^2,8"] 
|===

|sourceNodeId|Source node ID

|sourceNodeExternalId|Source node external ID

|sourceNodeGroupId|Source node group ID

|sourceNode|Source node object of type org.jumpmind.symmetric.model.Node

|targetNodeId|Target node ID

|targetNodeExternalId|Target node external ID

|targetNodeGroupId|Target node group ID

|targetNode|Target node object of type org.jumpmind.symmetric.model.Node

|engine|Current engine of type org.jumpmind.symmetric.ISymmetricEngine

|log|Logger of type org.slf4j.Logger for writing messages to log

|===

[source, sql]
----
insert into sym_data (node_list, table_name, event_type, row_data, trigger_hist_id, channel_id, create_time)
select '00001', source_table_name, 'B', 'log.info("Hello, world");', trigger_hist_id, 'config', current_timestamp
from sym_trigger_hist where source_table_name = 'sym_node' and inactive_time is null;
----


===== Table Schema

A "create" event will send the table definition as XML to the target nodes, where it is converted to database specific SQL that will
either create the table if it's missing or alter it to match the definition.

[source, sql]
----
insert into sym_data (node_list, table_name, event_type, trigger_hist_id, channel_id, create_time)
select '00001', source_table_name, 'C', trigger_hist_id, 'reload', current_timestamp
from sym_trigger_hist where source_table_name = 'sale_transaction' and inactive_time is null;
----

There are three options that can be specified in the old_data column. These options should be comma separated. The options are
excludeIndices, excludeForeignKeys, and excludeDefaults. The option excludeIndices will send the create table
request without associated indices. The excludeForeignKeys option will send the create table request without the associated
foreign key references. The excludeDefaults option will send the create table request without column defaults.

[source, sql]
----
insert into sym_data (node_list, table_name, event_type, trigger_hist_id, channel_id, create_time, old_data)
select '00001', source_table_name, 'C', trigger_hist_id, 'reload', current_timestamp, 'deferIndices,deferForeignKeys'
from sym_trigger_hist where source_table_name = 'sale_transaction' and inactive_time is null;
----

endif::pro[]
